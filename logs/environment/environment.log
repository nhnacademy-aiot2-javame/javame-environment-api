2025-05-29 13:01:38 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [6bae70ab] created for request: /environment/javame/origins
2025-05-29 13:01:38 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getOrigins()
2025-05-29 13:01:38 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getOrigins, 파라미터 = [javame]
2025-05-29 13:01:38 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getOriginList()
2025-05-29 13:01:39 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getOriginList() => 472ms
2025-05-29 13:01:39 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getOrigins() => 473ms
2025-05-29 13:01:42 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [3ded04fe] created for request: /environment/javame/tree
2025-05-29 13:01:42 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.BuildTreeController.getTree()
2025-05-29 13:01:42 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.BuildTreeController, 메서드 = getTree, 파라미터 = [javame]
2025-05-29 13:01:42 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.tree.service.BuildTreeService.buildTree()
2025-05-29 13:01:42 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:43 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1193ms
2025-05-29 13:01:43 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:44 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 304ms
2025-05-29 13:01:44 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:44 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 311ms
2025-05-29 13:01:44 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:44 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 313ms
2025-05-29 13:01:44 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:45 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 405ms
2025-05-29 13:01:45 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:45 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 832ms
2025-05-29 13:01:45 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:46 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 969ms
2025-05-29 13:01:46 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:48 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1087ms
2025-05-29 13:01:48 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:49 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1279ms
2025-05-29 13:01:49 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:49 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 631ms
2025-05-29 13:01:49 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:50 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 312ms
2025-05-29 13:01:50 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:50 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 687ms
2025-05-29 13:01:50 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:52 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1508ms
2025-05-29 13:01:52 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:53 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1408ms
2025-05-29 13:01:53 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:54 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 308ms
2025-05-29 13:01:54 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:54 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 326ms
2025-05-29 13:01:54 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:55 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1286ms
2025-05-29 13:01:55 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:56 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 305ms
2025-05-29 13:01:56 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:57 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1125ms
2025-05-29 13:01:57 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:01:58 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1352ms
2025-05-29 13:01:58 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:00 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1496ms
2025-05-29 13:02:00 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:00 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 878ms
2025-05-29 13:02:00 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:02 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1690ms
2025-05-29 13:02:02 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:02 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 361ms
2025-05-29 13:02:02 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:03 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 310ms
2025-05-29 13:02:03 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:03 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 355ms
2025-05-29 13:02:03 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:04 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 835ms
2025-05-29 13:02:04 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:05 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 782ms
2025-05-29 13:02:05 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:02:06 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1389ms
2025-05-29 13:02:06 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.tree.service.BuildTreeService - 최종 트리: TreeNode(label=루트, tag=root, value=root, children=[TreeNode(label=경남 캠퍼스, tag=building, value=gyeongnam_campus, children=[TreeNode(label=서버 데이터, tag=origin, value=server_data, children=[TreeNode(label=전력 계측기, tag=location, value=power_meter, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=modbus, tag=gatewayId, value=modbus, children=[TreeNode(label=전류(A), tag=measurement, value=current_amps, children=[]), TreeNode(label=역률(%), tag=measurement, value=power_factor_avg_percent, children=[]), TreeNode(label=전력 사용량(W), tag=measurement, value=power_watts, children=[]), TreeNode(label=온도(℃), tag=measurement, value=temperature_celsius, children=[])])])])]), TreeNode(label=서버 리소스, tag=location, value=server_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=CPU, tag=gatewayId, value=cpu, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=usage_idle, children=[]), TreeNode(label=I/O 대기시간(%), tag=measurement, value=usage_iowait, children=[]), TreeNode(label=시스템 사용률(%), tag=measurement, value=usage_system, children=[]), TreeNode(label=사용자 사용률(%), tag=measurement, value=usage_user, children=[])]), TreeNode(label=디스크, tag=gatewayId, value=disk, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=디스크 I/O, tag=gatewayId, value=diskio, children=[TreeNode(label=I/O 작업 시간(ms), tag=measurement, value=io_time, children=[]), TreeNode(label=읽기량(Byte), tag=measurement, value=read_bytes, children=[]), TreeNode(label=쓰기량(Byte), tag=measurement, value=write_bytes, children=[])]), TreeNode(label=메모리, tag=gatewayId, value=mem, children=[TreeNode(label=메모리 가용률(%), tag=measurement, value=available_percent, children=[]), TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=네트워크, tag=gatewayId, value=net, children=[TreeNode(label=수신량(Byte), tag=measurement, value=bytes_recv, children=[]), TreeNode(label=전송량(Byte), tag=measurement, value=bytes_sent, children=[])]), TreeNode(label=센서, tag=gatewayId, value=sensors, children=[TreeNode(label=센서 온도(℃), tag=measurement, value=temp_input, children=[])]), TreeNode(label=스왑, tag=gatewayId, value=swap, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=시스템, tag=gatewayId, value=system, children=[TreeNode(label=1분 평균 부하, tag=measurement, value=load1, children=[])])])])]), TreeNode(label=서비스 리소스, tag=location, value=service_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=인증 서비스, tag=gatewayId, value=javame-auth, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=환경 API, tag=gatewayId, value=javame-environment-api, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=프론트엔드, tag=gatewayId, value=javame-frontend, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=디스크 읽기량(Byte), tag=measurement, value=disk_io_bytes_direction_read, children=[]), TreeNode(label=디스크 쓰기량(Byte), tag=measurement, value=disk_io_bytes_direction_write, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=게이트웨이, tag=gatewayId, value=javame-gateway, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=회원 서비스, tag=gatewayId, value=javame-member, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])])])])]), TreeNode(label=출입구, tag=location, value=입구, children=[TreeNode(label=24e124743d011875, tag=deviceId, value=24e124743d011875, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[])])])])])])
2025-05-29 13:02:06 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.tree.service.BuildTreeService.buildTree() => 24050ms
2025-05-29 13:02:06 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.controller.BuildTreeController - 반환되는 트리구조: TreeNode(label=루트, tag=root, value=root, children=[TreeNode(label=경남 캠퍼스, tag=building, value=gyeongnam_campus, children=[TreeNode(label=서버 데이터, tag=origin, value=server_data, children=[TreeNode(label=전력 계측기, tag=location, value=power_meter, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=modbus, tag=gatewayId, value=modbus, children=[TreeNode(label=전류(A), tag=measurement, value=current_amps, children=[]), TreeNode(label=역률(%), tag=measurement, value=power_factor_avg_percent, children=[]), TreeNode(label=전력 사용량(W), tag=measurement, value=power_watts, children=[]), TreeNode(label=온도(℃), tag=measurement, value=temperature_celsius, children=[])])])])]), TreeNode(label=서버 리소스, tag=location, value=server_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=CPU, tag=gatewayId, value=cpu, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=usage_idle, children=[]), TreeNode(label=I/O 대기시간(%), tag=measurement, value=usage_iowait, children=[]), TreeNode(label=시스템 사용률(%), tag=measurement, value=usage_system, children=[]), TreeNode(label=사용자 사용률(%), tag=measurement, value=usage_user, children=[])]), TreeNode(label=디스크, tag=gatewayId, value=disk, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=디스크 I/O, tag=gatewayId, value=diskio, children=[TreeNode(label=I/O 작업 시간(ms), tag=measurement, value=io_time, children=[]), TreeNode(label=읽기량(Byte), tag=measurement, value=read_bytes, children=[]), TreeNode(label=쓰기량(Byte), tag=measurement, value=write_bytes, children=[])]), TreeNode(label=메모리, tag=gatewayId, value=mem, children=[TreeNode(label=메모리 가용률(%), tag=measurement, value=available_percent, children=[]), TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=네트워크, tag=gatewayId, value=net, children=[TreeNode(label=수신량(Byte), tag=measurement, value=bytes_recv, children=[]), TreeNode(label=전송량(Byte), tag=measurement, value=bytes_sent, children=[])]), TreeNode(label=센서, tag=gatewayId, value=sensors, children=[TreeNode(label=센서 온도(℃), tag=measurement, value=temp_input, children=[])]), TreeNode(label=스왑, tag=gatewayId, value=swap, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=시스템, tag=gatewayId, value=system, children=[TreeNode(label=1분 평균 부하, tag=measurement, value=load1, children=[])])])])]), TreeNode(label=서비스 리소스, tag=location, value=service_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=인증 서비스, tag=gatewayId, value=javame-auth, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=환경 API, tag=gatewayId, value=javame-environment-api, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=프론트엔드, tag=gatewayId, value=javame-frontend, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=디스크 읽기량(Byte), tag=measurement, value=disk_io_bytes_direction_read, children=[]), TreeNode(label=디스크 쓰기량(Byte), tag=measurement, value=disk_io_bytes_direction_write, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=게이트웨이, tag=gatewayId, value=javame-gateway, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=회원 서비스, tag=gatewayId, value=javame-member, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])])])])]), TreeNode(label=출입구, tag=location, value=입구, children=[TreeNode(label=24e124743d011875, tag=deviceId, value=24e124743d011875, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[])])])])])])
2025-05-29 13:02:06 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.tree.service.BuildTreeService.convertToDto()
2025-05-29 13:02:06 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.tree.service.BuildTreeService.convertToDto() => 1ms
2025-05-29 13:02:06 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.BuildTreeController.getTree() => 24052ms
2025-05-29 13:02:20 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [23d243d9] created for request: /environment/javame/chart/type/current_amps
2025-05-29 13:02:20 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor()
2025-05-29 13:02:20 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getChartDataForSensor, 파라미터 = [javame, current_amps, server_data]
2025-05-29 13:02:20 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData()
2025-05-29 13:02:20 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [10a92731] created for request: /environment/javame/time-series-stream
2025-05-29 13:02:20 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:02:20 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:02:20 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:02:20 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 2ms
2025-05-29 13:02:20 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:20 [pool-4-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:21 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData() => 415ms
2025-05-29 13:02:21 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor() => 415ms
2025-05-29 13:02:22 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1519ms
2025-05-29 13:02:22 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [b55a103d] created for request: /environment/javame/chart/pie
2025-05-29 13:02:22 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData()
2025-05-29 13:02:22 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getPieChartData, 파라미터 = [javame, server_data]
2025-05-29 13:02:22 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData()
2025-05-29 13:02:23 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData() => 312ms
2025-05-29 13:02:23 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData() => 312ms
2025-05-29 13:02:25 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [2364857a] created for request: /environment/javame/time-series-stream
2025-05-29 13:02:25 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:02:25 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:02:25 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:02:25 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:02:25 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:25 [pool-5-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:25 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 670ms
2025-05-29 13:02:25 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [a7adc196] created for request: /environment/javame/chart/type/current_amps
2025-05-29 13:02:25 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor()
2025-05-29 13:02:25 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getChartDataForSensor, 파라미터 = [javame, current_amps, server_data]
2025-05-29 13:02:25 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData()
2025-05-29 13:02:26 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData() => 683ms
2025-05-29 13:02:26 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor() => 685ms
2025-05-29 13:02:26 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [39ace74d] created for request: /environment/javame/time-series-stream
2025-05-29 13:02:26 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:02:26 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:02:26 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:02:26 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 0ms
2025-05-29 13:02:26 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:26 [pool-6-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:26 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [de08696a] created for request: /environment/javame/chart/type/current_amps
2025-05-29 13:02:26 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [0b9fd06a] created for request: /environment/javame/chart/pie
2025-05-29 13:02:26 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 282ms
2025-05-29 13:02:26 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor()
2025-05-29 13:02:26 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getChartDataForSensor, 파라미터 = [javame, current_amps, server_data]
2025-05-29 13:02:26 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData()
2025-05-29 13:02:26 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData()
2025-05-29 13:02:26 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getPieChartData, 파라미터 = [javame, server_data]
2025-05-29 13:02:26 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData()
2025-05-29 13:02:27 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [9df19709] created for request: /environment/javame/time-series-stream
2025-05-29 13:02:27 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:02:27 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=power_factor_avg_percent, _measurement=power_factor_avg_percent}]
2025-05-29 13:02:27 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=power_factor_avg_percent, _measurement=power_factor_avg_percent, companyDomain=javame}
2025-05-29 13:02:27 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:02:27 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:27 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:27 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData() => 294ms
2025-05-29 13:02:27 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor() => 294ms
2025-05-29 13:02:27 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData() => 347ms
2025-05-29 13:02:27 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData() => 349ms
2025-05-29 13:02:27 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 663ms
2025-05-29 13:02:28 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [b9ac3a87] created for request: /environment/javame/time-series-stream
2025-05-29 13:02:28 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:02:28 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:02:28 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:02:28 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 0ms
2025-05-29 13:02:28 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:28 [pool-8-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:28 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [be31c2d4] created for request: /environment/javame/chart/type/power_factor_avg_percent
2025-05-29 13:02:28 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor()
2025-05-29 13:02:28 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getChartDataForSensor, 파라미터 = [javame, power_factor_avg_percent, server_data]
2025-05-29 13:02:28 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData()
2025-05-29 13:02:28 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 314ms
2025-05-29 13:02:29 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData() => 714ms
2025-05-29 13:02:29 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor() => 714ms
2025-05-29 13:02:35 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [e6840a62] created for request: /environment/javame/chart/type/current_amps
2025-05-29 13:02:35 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor()
2025-05-29 13:02:35 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getChartDataForSensor, 파라미터 = [javame, current_amps, server_data]
2025-05-29 13:02:35 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData()
2025-05-29 13:02:35 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData() => 453ms
2025-05-29 13:02:35 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor() => 453ms
2025-05-29 13:02:44 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [7a6c1ac7] created for request: /environment/javame/chart/pie
2025-05-29 13:02:44 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData()
2025-05-29 13:02:44 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getPieChartData, 파라미터 = [javame, server_data]
2025-05-29 13:02:44 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData()
2025-05-29 13:02:44 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData() => 300ms
2025-05-29 13:02:44 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData() => 300ms
2025-05-29 13:02:45 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [f4887798] created for request: /environment/javame/time-series-stream
2025-05-29 13:02:45 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:02:45 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=power_factor_avg_percent, _measurement=power_factor_avg_percent}]
2025-05-29 13:02:45 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=power_factor_avg_percent, _measurement=power_factor_avg_percent, companyDomain=javame}
2025-05-29 13:02:45 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:02:45 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:45 [pool-9-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:45 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 440ms
2025-05-29 13:02:52 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:52 [pool-4-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:53 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 506ms
2025-05-29 13:02:55 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:55 [pool-5-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:56 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 688ms
2025-05-29 13:02:56 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:56 [pool-6-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:57 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 635ms
2025-05-29 13:02:57 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:57 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:58 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 739ms
2025-05-29 13:02:58 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:02:58 [pool-8-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:02:59 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 897ms
2025-05-29 13:03:03 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-29 13:03:15 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:15 [pool-9-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:16 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 528ms
2025-05-29 13:03:23 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:23 [pool-4-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:24 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1228ms
2025-05-29 13:03:26 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:26 [pool-5-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:27 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:27 [pool-6-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:27 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1147ms
2025-05-29 13:03:28 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 640ms
2025-05-29 13:03:28 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:28 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:29 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:29 [pool-8-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:29 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 973ms
2025-05-29 13:03:30 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 548ms
2025-05-29 13:03:46 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:46 [pool-9-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:46 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 429ms
2025-05-29 13:03:54 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:54 [pool-4-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:55 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1697ms
2025-05-29 13:03:57 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:57 [pool-5-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:58 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:58 [pool-6-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:03:58 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 640ms
2025-05-29 13:03:58 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 629ms
2025-05-29 13:03:59 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:03:59 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:00 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:04:00 [pool-8-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:00 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 548ms
2025-05-29 13:04:00 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 742ms
2025-05-29 13:04:16 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:04:16 [pool-9-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:16 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 364ms
2025-05-29 13:04:23 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [4b42ea94] created for request: /environment/javame/tree
2025-05-29 13:04:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.BuildTreeController.getTree()
2025-05-29 13:04:23 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.BuildTreeController, 메서드 = getTree, 파라미터 = [javame]
2025-05-29 13:04:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.tree.service.BuildTreeService.buildTree()
2025-05-29 13:04:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:24 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [6617c404] created for request: /environment/javame/javame/current
2025-05-29 13:04:24 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 595ms
2025-05-29 13:04:24 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:25 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1093ms
2025-05-29 13:04:25 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:25 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:04:25 [pool-4-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:25 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 443ms
2025-05-29 13:04:25 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:26 [pool-4-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 323ms
2025-05-29 13:04:27 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1059ms
2025-05-29 13:04:27 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:28 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1209ms
2025-05-29 13:04:28 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:28 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:04:28 [pool-5-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:28 [pool-5-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 266ms
2025-05-29 13:04:28 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:04:28 [pool-6-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:28 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 643ms
2025-05-29 13:04:28 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:29 [pool-6-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 332ms
2025-05-29 13:04:29 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 373ms
2025-05-29 13:04:29 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:30 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:04:30 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:30 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 924ms
2025-05-29 13:04:30 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:30 [pool-7-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 348ms
2025-05-29 13:04:30 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:04:30 [pool-8-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:30 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 689ms
2025-05-29 13:04:30 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:31 [pool-8-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 338ms
2025-05-29 13:04:32 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1254ms
2025-05-29 13:04:32 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:33 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1409ms
2025-05-29 13:04:33 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:34 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 902ms
2025-05-29 13:04:34 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:36 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1694ms
2025-05-29 13:04:36 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:38 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1884ms
2025-05-29 13:04:38 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:40 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 2240ms
2025-05-29 13:04:40 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:42 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1825ms
2025-05-29 13:04:42 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:43 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1146ms
2025-05-29 13:04:43 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:44 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1231ms
2025-05-29 13:04:44 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 601ms
2025-05-29 13:04:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:46 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:04:46 [pool-9-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "power_factor_avg_percent") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:04:46 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1833ms
2025-05-29 13:04:46 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:47 [pool-9-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 383ms
2025-05-29 13:04:47 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 337ms
2025-05-29 13:04:47 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:49 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 2172ms
2025-05-29 13:04:49 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:49 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 481ms
2025-05-29 13:04:49 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:50 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 314ms
2025-05-29 13:04:50 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:50 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 682ms
2025-05-29 13:04:50 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:52 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1730ms
2025-05-29 13:04:52 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:54 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1722ms
2025-05-29 13:04:54 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:55 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1588ms
2025-05-29 13:04:55 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:04:56 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 537ms
2025-05-29 13:04:56 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.tree.service.BuildTreeService - 최종 트리: TreeNode(label=루트, tag=root, value=root, children=[TreeNode(label=경남 캠퍼스, tag=building, value=gyeongnam_campus, children=[TreeNode(label=서버 데이터, tag=origin, value=server_data, children=[TreeNode(label=전력 계측기, tag=location, value=power_meter, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=modbus, tag=gatewayId, value=modbus, children=[TreeNode(label=전류(A), tag=measurement, value=current_amps, children=[]), TreeNode(label=역률(%), tag=measurement, value=power_factor_avg_percent, children=[]), TreeNode(label=전력 사용량(W), tag=measurement, value=power_watts, children=[]), TreeNode(label=온도(℃), tag=measurement, value=temperature_celsius, children=[])])])])]), TreeNode(label=서버 리소스, tag=location, value=server_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=CPU, tag=gatewayId, value=cpu, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=usage_idle, children=[]), TreeNode(label=I/O 대기시간(%), tag=measurement, value=usage_iowait, children=[]), TreeNode(label=시스템 사용률(%), tag=measurement, value=usage_system, children=[]), TreeNode(label=사용자 사용률(%), tag=measurement, value=usage_user, children=[])]), TreeNode(label=디스크, tag=gatewayId, value=disk, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=디스크 I/O, tag=gatewayId, value=diskio, children=[TreeNode(label=I/O 작업 시간(ms), tag=measurement, value=io_time, children=[]), TreeNode(label=읽기량(Byte), tag=measurement, value=read_bytes, children=[]), TreeNode(label=쓰기량(Byte), tag=measurement, value=write_bytes, children=[])]), TreeNode(label=메모리, tag=gatewayId, value=mem, children=[TreeNode(label=메모리 가용률(%), tag=measurement, value=available_percent, children=[]), TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=네트워크, tag=gatewayId, value=net, children=[TreeNode(label=수신량(Byte), tag=measurement, value=bytes_recv, children=[]), TreeNode(label=전송량(Byte), tag=measurement, value=bytes_sent, children=[])]), TreeNode(label=센서, tag=gatewayId, value=sensors, children=[TreeNode(label=센서 온도(℃), tag=measurement, value=temp_input, children=[])]), TreeNode(label=스왑, tag=gatewayId, value=swap, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=시스템, tag=gatewayId, value=system, children=[TreeNode(label=1분 평균 부하, tag=measurement, value=load1, children=[])])])])]), TreeNode(label=서비스 리소스, tag=location, value=service_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=인증 서비스, tag=gatewayId, value=javame-auth, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=환경 API, tag=gatewayId, value=javame-environment-api, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=프론트엔드, tag=gatewayId, value=javame-frontend, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=디스크 읽기량(Byte), tag=measurement, value=disk_io_bytes_direction_read, children=[]), TreeNode(label=디스크 쓰기량(Byte), tag=measurement, value=disk_io_bytes_direction_write, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=게이트웨이, tag=gatewayId, value=javame-gateway, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=회원 서비스, tag=gatewayId, value=javame-member, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])])])])]), TreeNode(label=출입구, tag=location, value=입구, children=[TreeNode(label=24e124743d011875, tag=deviceId, value=24e124743d011875, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[])])])])])])
2025-05-29 13:04:56 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.tree.service.BuildTreeService.buildTree() => 32624ms
2025-05-29 13:04:56 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.controller.BuildTreeController - 반환되는 트리구조: TreeNode(label=루트, tag=root, value=root, children=[TreeNode(label=경남 캠퍼스, tag=building, value=gyeongnam_campus, children=[TreeNode(label=서버 데이터, tag=origin, value=server_data, children=[TreeNode(label=전력 계측기, tag=location, value=power_meter, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=modbus, tag=gatewayId, value=modbus, children=[TreeNode(label=전류(A), tag=measurement, value=current_amps, children=[]), TreeNode(label=역률(%), tag=measurement, value=power_factor_avg_percent, children=[]), TreeNode(label=전력 사용량(W), tag=measurement, value=power_watts, children=[]), TreeNode(label=온도(℃), tag=measurement, value=temperature_celsius, children=[])])])])]), TreeNode(label=서버 리소스, tag=location, value=server_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=CPU, tag=gatewayId, value=cpu, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=usage_idle, children=[]), TreeNode(label=I/O 대기시간(%), tag=measurement, value=usage_iowait, children=[]), TreeNode(label=시스템 사용률(%), tag=measurement, value=usage_system, children=[]), TreeNode(label=사용자 사용률(%), tag=measurement, value=usage_user, children=[])]), TreeNode(label=디스크, tag=gatewayId, value=disk, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=디스크 I/O, tag=gatewayId, value=diskio, children=[TreeNode(label=I/O 작업 시간(ms), tag=measurement, value=io_time, children=[]), TreeNode(label=읽기량(Byte), tag=measurement, value=read_bytes, children=[]), TreeNode(label=쓰기량(Byte), tag=measurement, value=write_bytes, children=[])]), TreeNode(label=메모리, tag=gatewayId, value=mem, children=[TreeNode(label=메모리 가용률(%), tag=measurement, value=available_percent, children=[]), TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=네트워크, tag=gatewayId, value=net, children=[TreeNode(label=수신량(Byte), tag=measurement, value=bytes_recv, children=[]), TreeNode(label=전송량(Byte), tag=measurement, value=bytes_sent, children=[])]), TreeNode(label=센서, tag=gatewayId, value=sensors, children=[TreeNode(label=센서 온도(℃), tag=measurement, value=temp_input, children=[])]), TreeNode(label=스왑, tag=gatewayId, value=swap, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=시스템, tag=gatewayId, value=system, children=[TreeNode(label=1분 평균 부하, tag=measurement, value=load1, children=[])])])])]), TreeNode(label=서비스 리소스, tag=location, value=service_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=인증 서비스, tag=gatewayId, value=javame-auth, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=환경 API, tag=gatewayId, value=javame-environment-api, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=프론트엔드, tag=gatewayId, value=javame-frontend, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=디스크 읽기량(Byte), tag=measurement, value=disk_io_bytes_direction_read, children=[]), TreeNode(label=디스크 쓰기량(Byte), tag=measurement, value=disk_io_bytes_direction_write, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=게이트웨이, tag=gatewayId, value=javame-gateway, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=회원 서비스, tag=gatewayId, value=javame-member, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])])])])]), TreeNode(label=출입구, tag=location, value=입구, children=[TreeNode(label=24e124743d011875, tag=deviceId, value=24e124743d011875, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[])])])])])])
2025-05-29 13:04:56 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.tree.service.BuildTreeService.convertToDto()
2025-05-29 13:04:56 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.tree.service.BuildTreeService.convertToDto() => 1ms
2025-05-29 13:04:56 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.BuildTreeController.getTree() => 32626ms
2025-05-29 13:05:23 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [5f36c795] created for request: /environment/javame/time-series-stream
2025-05-29 13:05:23 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:05:23 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle}]
2025-05-29 13:05:23 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle, companyDomain=javame}
2025-05-29 13:05:23 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 0ms
2025-05-29 13:05:23 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:05:23 [pool-10-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:05:23 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [aeb89b8f] created for request: /environment/javame/chart/type/usage_idle
2025-05-29 13:05:23 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor()
2025-05-29 13:05:23 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getChartDataForSensor, 파라미터 = [javame, usage_idle, server_data]
2025-05-29 13:05:23 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData()
2025-05-29 13:05:24 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 380ms
2025-05-29 13:05:24 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData() => 662ms
2025-05-29 13:05:24 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor() => 662ms
2025-05-29 13:05:27 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [2dbd6110] created for request: /environment/javame/time-series-stream
2025-05-29 13:05:27 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:05:27 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle}]
2025-05-29 13:05:27 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle, companyDomain=javame}
2025-05-29 13:05:27 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:05:27 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:05:27 [pool-11-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:05:27 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [bc850753] created for request: /environment/javame/chart/pie
2025-05-29 13:05:27 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData()
2025-05-29 13:05:27 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getPieChartData, 파라미터 = [javame, server_data]
2025-05-29 13:05:27 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData()
2025-05-29 13:05:27 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 325ms
2025-05-29 13:05:27 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData() => 305ms
2025-05-29 13:05:27 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData() => 306ms
2025-05-29 13:05:32 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [eef22da3] created for request: /environment/javame/time-series-stream
2025-05-29 13:05:32 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:05:32 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle}]
2025-05-29 13:05:32 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle, companyDomain=javame}
2025-05-29 13:05:32 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:05:32 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:05:32 [pool-12-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:05:34 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1369ms
2025-05-29 13:05:43 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [a4ca3ded] created for request: /environment/javame/time-series-stream
2025-05-29 13:05:43 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:05:43 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle}]
2025-05-29 13:05:43 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle, companyDomain=javame}
2025-05-29 13:05:43 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:05:43 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:05:43 [pool-13-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:05:44 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 940ms
2025-05-29 13:05:46 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [e3b0aa9f] created for request: /environment/javame/time-series-stream
2025-05-29 13:05:46 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:05:46 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle}]
2025-05-29 13:05:46 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle, companyDomain=javame}
2025-05-29 13:05:46 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:05:46 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:05:46 [pool-14-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:05:47 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 918ms
2025-05-29 13:05:48 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [76035633] created for request: /environment/javame/time-series-stream
2025-05-29 13:05:48 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:05:48 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle}]
2025-05-29 13:05:48 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=server_resource_data, deviceId=192.168.71.74, place=server_room, gatewayId=cpu, measurement=usage_idle, _measurement=usage_idle, companyDomain=javame}
2025-05-29 13:05:48 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:05:48 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:05:48 [pool-15-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:05:49 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1671ms
2025-05-29 13:05:54 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:05:54 [pool-10-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:05:54 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 345ms
2025-05-29 13:05:57 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:05:57 [pool-11-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:05:59 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1682ms
2025-05-29 13:06:04 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:04 [pool-12-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:05 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 795ms
2025-05-29 13:06:14 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:14 [pool-13-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:16 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1788ms
2025-05-29 13:06:17 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:17 [pool-14-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:18 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 375ms
2025-05-29 13:06:19 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:19 [pool-15-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:20 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1005ms
2025-05-29 13:06:24 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:24 [pool-10-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:26 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1844ms
2025-05-29 13:06:29 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:29 [pool-11-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:30 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1735ms
2025-05-29 13:06:35 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:35 [pool-12-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:37 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 2471ms
2025-05-29 13:06:46 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:46 [pool-13-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:48 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:48 [pool-14-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:48 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 2003ms
2025-05-29 13:06:48 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 573ms
2025-05-29 13:06:50 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:50 [pool-15-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:53 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 2696ms
2025-05-29 13:06:56 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:06:56 [pool-10-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:06:57 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 965ms
2025-05-29 13:07:00 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:00 [pool-11-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:02 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 2052ms
2025-05-29 13:07:07 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:07 [pool-12-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:10 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 3286ms
2025-05-29 13:07:18 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:18 [pool-13-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:18 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 270ms
2025-05-29 13:07:18 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:18 [pool-14-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:19 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 583ms
2025-05-29 13:07:23 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:23 [pool-15-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:24 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 854ms
2025-05-29 13:07:27 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:27 [pool-10-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:27 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 664ms
2025-05-29 13:07:32 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:32 [pool-11-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:34 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1143ms
2025-05-29 13:07:40 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:40 [pool-12-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:42 [pool-12-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1260ms
2025-05-29 13:07:45 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [75ceeae0] created for request: /environment/javame/javame/current
2025-05-29 13:07:47 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [6f01cad8] created for request: /environment/javame/javame/current
2025-05-29 13:07:48 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:48 [pool-13-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:49 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:49 [pool-14-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:49 [pool-13-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 884ms
2025-05-29 13:07:49 [pool-14-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 547ms
2025-05-29 13:07:49 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [43c7d817] created for request: /environment/javame/javame/current
2025-05-29 13:07:50 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [ea591a3f] created for request: /environment/javame/javame/current
2025-05-29 13:07:54 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:54 [pool-15-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:54 [pool-15-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 320ms
2025-05-29 13:07:57 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:07:57 [pool-10-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:07:58 [pool-10-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 507ms
2025-05-29 13:08:03 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-29 13:08:04 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:08:04 [pool-11-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:08:04 [pool-11-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 355ms
2025-05-29 13:11:13 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [82cdfdf1] created for request: /environment/javame/tree
2025-05-29 13:11:13 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.BuildTreeController.getTree()
2025-05-29 13:11:13 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.BuildTreeController, 메서드 = getTree, 파라미터 = [javame]
2025-05-29 13:11:13 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.tree.service.BuildTreeService.buildTree()
2025-05-29 13:11:13 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:14 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 565ms
2025-05-29 13:11:14 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:15 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 988ms
2025-05-29 13:11:15 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:16 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1152ms
2025-05-29 13:11:16 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:17 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1348ms
2025-05-29 13:11:17 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:18 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 486ms
2025-05-29 13:11:18 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:19 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1327ms
2025-05-29 13:11:19 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 446ms
2025-05-29 13:11:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 402ms
2025-05-29 13:11:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:22 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1765ms
2025-05-29 13:11:22 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:22 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 350ms
2025-05-29 13:11:22 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 446ms
2025-05-29 13:11:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 663ms
2025-05-29 13:11:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:24 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 626ms
2025-05-29 13:11:24 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:25 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1103ms
2025-05-29 13:11:25 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:26 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1217ms
2025-05-29 13:11:26 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:27 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 788ms
2025-05-29 13:11:27 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:29 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1452ms
2025-05-29 13:11:29 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:29 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 346ms
2025-05-29 13:11:29 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:30 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1319ms
2025-05-29 13:11:30 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:34 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 3768ms
2025-05-29 13:11:34 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:35 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1019ms
2025-05-29 13:11:35 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:35 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 372ms
2025-05-29 13:11:35 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:37 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1690ms
2025-05-29 13:11:37 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:39 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1857ms
2025-05-29 13:11:39 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:40 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1092ms
2025-05-29 13:11:40 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:42 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 2238ms
2025-05-29 13:11:42 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:44 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1730ms
2025-05-29 13:11:44 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 921ms
2025-05-29 13:11:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:11:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 488ms
2025-05-29 13:11:45 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.tree.service.BuildTreeService - 최종 트리: TreeNode(label=루트, tag=root, value=root, children=[TreeNode(label=경남 캠퍼스, tag=building, value=gyeongnam_campus, children=[TreeNode(label=서버 데이터, tag=origin, value=server_data, children=[TreeNode(label=전력 계측기, tag=location, value=power_meter, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=modbus, tag=gatewayId, value=modbus, children=[TreeNode(label=전류(A), tag=measurement, value=current_amps, children=[]), TreeNode(label=역률(%), tag=measurement, value=power_factor_avg_percent, children=[]), TreeNode(label=전력 사용량(W), tag=measurement, value=power_watts, children=[]), TreeNode(label=온도(℃), tag=measurement, value=temperature_celsius, children=[])])])])]), TreeNode(label=서버 리소스, tag=location, value=server_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=CPU, tag=gatewayId, value=cpu, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=usage_idle, children=[]), TreeNode(label=I/O 대기시간(%), tag=measurement, value=usage_iowait, children=[]), TreeNode(label=시스템 사용률(%), tag=measurement, value=usage_system, children=[]), TreeNode(label=사용자 사용률(%), tag=measurement, value=usage_user, children=[])]), TreeNode(label=디스크, tag=gatewayId, value=disk, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=디스크 I/O, tag=gatewayId, value=diskio, children=[TreeNode(label=I/O 작업 시간(ms), tag=measurement, value=io_time, children=[]), TreeNode(label=읽기량(Byte), tag=measurement, value=read_bytes, children=[]), TreeNode(label=쓰기량(Byte), tag=measurement, value=write_bytes, children=[])]), TreeNode(label=메모리, tag=gatewayId, value=mem, children=[TreeNode(label=메모리 가용률(%), tag=measurement, value=available_percent, children=[]), TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=네트워크, tag=gatewayId, value=net, children=[TreeNode(label=수신량(Byte), tag=measurement, value=bytes_recv, children=[]), TreeNode(label=전송량(Byte), tag=measurement, value=bytes_sent, children=[])]), TreeNode(label=센서, tag=gatewayId, value=sensors, children=[TreeNode(label=센서 온도(℃), tag=measurement, value=temp_input, children=[])]), TreeNode(label=스왑, tag=gatewayId, value=swap, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=시스템, tag=gatewayId, value=system, children=[TreeNode(label=1분 평균 부하, tag=measurement, value=load1, children=[])])])])]), TreeNode(label=서비스 리소스, tag=location, value=service_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=인증 서비스, tag=gatewayId, value=javame-auth, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=환경 API, tag=gatewayId, value=javame-environment-api, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=프론트엔드, tag=gatewayId, value=javame-frontend, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=디스크 읽기량(Byte), tag=measurement, value=disk_io_bytes_direction_read, children=[]), TreeNode(label=디스크 쓰기량(Byte), tag=measurement, value=disk_io_bytes_direction_write, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=게이트웨이, tag=gatewayId, value=javame-gateway, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=회원 서비스, tag=gatewayId, value=javame-member, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])])])])]), TreeNode(label=출입구, tag=location, value=입구, children=[TreeNode(label=24e124743d011875, tag=deviceId, value=24e124743d011875, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[])])])])])])
2025-05-29 13:11:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.tree.service.BuildTreeService.buildTree() => 31981ms
2025-05-29 13:11:45 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.controller.BuildTreeController - 반환되는 트리구조: TreeNode(label=루트, tag=root, value=root, children=[TreeNode(label=경남 캠퍼스, tag=building, value=gyeongnam_campus, children=[TreeNode(label=서버 데이터, tag=origin, value=server_data, children=[TreeNode(label=전력 계측기, tag=location, value=power_meter, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=modbus, tag=gatewayId, value=modbus, children=[TreeNode(label=전류(A), tag=measurement, value=current_amps, children=[]), TreeNode(label=역률(%), tag=measurement, value=power_factor_avg_percent, children=[]), TreeNode(label=전력 사용량(W), tag=measurement, value=power_watts, children=[]), TreeNode(label=온도(℃), tag=measurement, value=temperature_celsius, children=[])])])])]), TreeNode(label=서버 리소스, tag=location, value=server_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=CPU, tag=gatewayId, value=cpu, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=usage_idle, children=[]), TreeNode(label=I/O 대기시간(%), tag=measurement, value=usage_iowait, children=[]), TreeNode(label=시스템 사용률(%), tag=measurement, value=usage_system, children=[]), TreeNode(label=사용자 사용률(%), tag=measurement, value=usage_user, children=[])]), TreeNode(label=디스크, tag=gatewayId, value=disk, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=디스크 I/O, tag=gatewayId, value=diskio, children=[TreeNode(label=I/O 작업 시간(ms), tag=measurement, value=io_time, children=[]), TreeNode(label=읽기량(Byte), tag=measurement, value=read_bytes, children=[]), TreeNode(label=쓰기량(Byte), tag=measurement, value=write_bytes, children=[])]), TreeNode(label=메모리, tag=gatewayId, value=mem, children=[TreeNode(label=메모리 가용률(%), tag=measurement, value=available_percent, children=[]), TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=네트워크, tag=gatewayId, value=net, children=[TreeNode(label=수신량(Byte), tag=measurement, value=bytes_recv, children=[]), TreeNode(label=전송량(Byte), tag=measurement, value=bytes_sent, children=[])]), TreeNode(label=센서, tag=gatewayId, value=sensors, children=[TreeNode(label=센서 온도(℃), tag=measurement, value=temp_input, children=[])]), TreeNode(label=스왑, tag=gatewayId, value=swap, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=시스템, tag=gatewayId, value=system, children=[TreeNode(label=1분 평균 부하, tag=measurement, value=load1, children=[])])])])]), TreeNode(label=서비스 리소스, tag=location, value=service_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=인증 서비스, tag=gatewayId, value=javame-auth, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=환경 API, tag=gatewayId, value=javame-environment-api, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=프론트엔드, tag=gatewayId, value=javame-frontend, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=디스크 읽기량(Byte), tag=measurement, value=disk_io_bytes_direction_read, children=[]), TreeNode(label=디스크 쓰기량(Byte), tag=measurement, value=disk_io_bytes_direction_write, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=게이트웨이, tag=gatewayId, value=javame-gateway, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=회원 서비스, tag=gatewayId, value=javame-member, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])])])])]), TreeNode(label=출입구, tag=location, value=입구, children=[TreeNode(label=24e124743d011875, tag=deviceId, value=24e124743d011875, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[])])])])])])
2025-05-29 13:11:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.tree.service.BuildTreeService.convertToDto()
2025-05-29 13:11:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.tree.service.BuildTreeService.convertToDto() => 0ms
2025-05-29 13:11:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.BuildTreeController.getTree() => 31981ms
2025-05-29 13:11:57 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [586ef39b] created for request: /environment/javame/chart/type/current_amps
2025-05-29 13:11:57 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor()
2025-05-29 13:11:57 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getChartDataForSensor, 파라미터 = [javame, current_amps, server_data]
2025-05-29 13:11:57 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData()
2025-05-29 13:11:57 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [a1039e96] created for request: /environment/javame/time-series-stream
2025-05-29 13:11:57 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:11:57 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:11:57 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:11:57 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:11:57 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:11:57 [pool-16-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:11:58 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData() => 495ms
2025-05-29 13:11:58 [http-nio-10273-exec-3] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor() => 495ms
2025-05-29 13:11:58 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 491ms
2025-05-29 13:11:58 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [3f5d96ec] created for request: /environment/javame/chart/pie
2025-05-29 13:11:58 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData()
2025-05-29 13:11:58 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getPieChartData, 파라미터 = [javame, server_data]
2025-05-29 13:11:58 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData()
2025-05-29 13:11:58 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [e4cf2ea2] created for request: /environment/javame/chart/type/current_amps
2025-05-29 13:11:58 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor()
2025-05-29 13:11:58 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getChartDataForSensor, 파라미터 = [javame, current_amps, server_data]
2025-05-29 13:11:58 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData()
2025-05-29 13:11:58 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData() => 359ms
2025-05-29 13:11:58 [http-nio-10273-exec-6] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData() => 359ms
2025-05-29 13:11:59 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [4b8d2d78] created for request: /environment/javame/time-series-stream
2025-05-29 13:11:59 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:11:59 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:11:59 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:11:59 [http-nio-10273-exec-7] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:11:59 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:11:59 [pool-17-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:11:59 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getChartData() => 539ms
2025-05-29 13:11:59 [http-nio-10273-exec-9] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getChartDataForSensor() => 539ms
2025-05-29 13:11:59 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 703ms
2025-05-29 13:12:02 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [c0a6ff01] created for request: /environment/javame/time-series-stream
2025-05-29 13:12:02 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [8e6e9312] created for request: /environment/javame/chart/pie
2025-05-29 13:12:02 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:12:02 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData()
2025-05-29 13:12:02 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:12:02 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getPieChartData, 파라미터 = [javame, server_data]
2025-05-29 13:12:02 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData()
2025-05-29 13:12:02 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:12:02 [http-nio-10273-exec-8] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 0ms
2025-05-29 13:12:02 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:02 [pool-18-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:02 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 292ms
2025-05-29 13:12:02 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getPieChartData() => 520ms
2025-05-29 13:12:02 [http-nio-10273-exec-10] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getPieChartData() => 520ms
2025-05-29 13:12:04 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [67ba21e9] created for request: /environment/javame/time-series-stream
2025-05-29 13:12:04 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:12:04 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:12:04 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:12:04 [http-nio-10273-exec-2] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 1ms
2025-05-29 13:12:04 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:04 [pool-19-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:05 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 416ms
2025-05-29 13:12:05 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [3c16eb2a] created for request: /environment/javame/time-series-stream
2025-05-29 13:12:05 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:12:05 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:12:05 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:12:05 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 0ms
2025-05-29 13:12:05 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:05 [pool-20-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:05 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 709ms
2025-05-29 13:12:06 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [9343870e] created for request: /environment/javame/time-series-stream
2025-05-29 13:12:06 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData()
2025-05-29 13:12:06 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesSseController, 메서드 = streamTimeSeriesData, 파라미터 = [javame, server_data, 180, {origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps}]
2025-05-29 13:12:06 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=server_data, filters={origin=server_data, building=gyeongnam_campus, location=power_meter, deviceId=192.168.71.74, place=server_room, gatewayId=modbus, measurement=current_amps, _measurement=current_amps, companyDomain=javame}
2025-05-29 13:12:06 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesSseController.streamTimeSeriesData() => 0ms
2025-05-29 13:12:06 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:06 [pool-21-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:07 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 652ms
2025-05-29 13:12:28 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:28 [pool-16-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:29 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 771ms
2025-05-29 13:12:29 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:29 [pool-17-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:30 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 946ms
2025-05-29 13:12:32 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:32 [pool-18-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:33 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 383ms
2025-05-29 13:12:35 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:35 [pool-19-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:35 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 669ms
2025-05-29 13:12:35 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:35 [pool-20-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:36 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 812ms
2025-05-29 13:12:37 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:37 [pool-21-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:12:37 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 349ms
2025-05-29 13:12:59 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:12:59 [pool-16-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:00 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 992ms
2025-05-29 13:13:00 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:00 [pool-17-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:03 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:03 [pool-18-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:03 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 2336ms
2025-05-29 13:13:03 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 595ms
2025-05-29 13:13:03 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-29 13:13:05 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:05 [pool-19-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:06 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 399ms
2025-05-29 13:13:06 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:06 [pool-20-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:07 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:07 [pool-21-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:07 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1070ms
2025-05-29 13:13:08 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 275ms
2025-05-29 13:13:30 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:30 [pool-16-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:30 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 692ms
2025-05-29 13:13:33 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:33 [pool-17-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:33 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:33 [pool-18-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:33 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 597ms
2025-05-29 13:13:34 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 469ms
2025-05-29 13:13:36 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:36 [pool-19-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:37 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 1345ms
2025-05-29 13:13:37 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:37 [pool-20-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:38 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:13:38 [pool-21-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:13:38 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 274ms
2025-05-29 13:13:38 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 353ms
2025-05-29 13:14:00 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:00 [pool-16-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:01 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 314ms
2025-05-29 13:14:03 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:03 [pool-17-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:04 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:04 [pool-18-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:04 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 466ms
2025-05-29 13:14:04 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 281ms
2025-05-29 13:14:07 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:07 [pool-19-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:07 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 353ms
2025-05-29 13:14:08 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:08 [pool-20-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:08 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:08 [pool-21-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:08 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 353ms
2025-05-29 13:14:08 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 500ms
2025-05-29 13:14:31 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:31 [pool-16-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:31 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 704ms
2025-05-29 13:14:34 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:34 [pool-17-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:34 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:34 [pool-18-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:34 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 285ms
2025-05-29 13:14:35 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 621ms
2025-05-29 13:14:37 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:37 [pool-19-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:38 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:38 [pool-20-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:38 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 717ms
2025-05-29 13:14:38 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:14:38 [pool-21-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:14:38 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 504ms
2025-05-29 13:14:39 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 999ms
2025-05-29 13:14:46 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [5f3c27bc] created for request: /environment/reports/generate
2025-05-29 13:14:46 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.report.controller.ReportController.generateReport()
2025-05-29 13:14:46 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.report.service.ReportService.generateReport()
2025-05-29 13:14:46 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.report.service.ReportService - AI 리포트 생성 시작 - 사용자 프롬프트: 'cpu 사용률 알려줘'
2025-05-29 13:14:46 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.report.service.AiReportDataService.prepareSimpleReport()
2025-05-29 13:14:46 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.report.service.AiReportDataService - 리포트 데이터 준비 시작 - 사용자 프롬프트: 'cpu 사용률 알려줘'
2025-05-29 13:14:46 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.report.service.AiReportDataService - 프롬프트에서 measurement 키워드 '사용률' 발견 -> measurement: usage_idle
2025-05-29 13:14:46 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getRawTimeSeriesData()
2025-05-29 13:14:46 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [RawDataForPeriod] Flux query = from(bucket: "data") |> range(start: time(v: "2025-05-28T04:14:46.796464850Z"), stop: time(v: "2025-05-29T04:14:46.796464850Z")) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> keep(columns: ["_time", "_field", "_value", "_measurement", "origin", "location", "gatewayId"]) |> sort(columns: ["_time"])
2025-05-29 13:14:47 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getRawTimeSeriesData() => 1049ms
2025-05-29 13:14:47 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getAggregatedChartDataForPeriod()
2025-05-29 13:14:47 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [AggregatedChartData] Flux query = from(bucket: "data") |> range(start: time(v: "2025-05-28T04:14:46.796464850Z"), stop: time(v: "2025-05-29T04:14:46.796464850Z")) |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["location"] == "server_resource_data") |> filter(fn: (r) => r["gatewayId"] == "cpu") |> aggregateWindow(every: 1h, fn: mean, createEmpty: false) |> sort(columns: ["_time"])
2025-05-29 13:14:48 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getAggregatedChartDataForPeriod() => 490ms
2025-05-29 13:14:48 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.report.service.AiReportDataService - 구체적 시스템 요청 처리 완료 - gatewayId: cpu, measurement: usage_idle, 기간: 2025-05-28 ~ 2025-05-29, 데이터 건수: 8606
2025-05-29 13:14:48 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.report.service.AiReportDataService.prepareSimpleReport() => 1556ms
2025-05-29 13:14:48 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.report.service.ReportService - 구체적 시스템 요청 처리 - gatewayId: cpu, measurement: usage_idle, 데이터 건수: 8606
2025-05-29 13:14:48 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.report.client.GeminiClient.generateSummary()
2025-05-29 13:14:58 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.report.client.GeminiClient.generateSummary() => 9705ms
2025-05-29 13:14:58 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.report.service.ReportService - 구체적 시스템 분석 AI 요약 생성 완료 (일부): '## CPU 유휴 사용률 분석 리포트 (2025-05-28 ~ 2025-05-29)

안녕하세요. 시스템 모니터링 데이터 분석 전문가입니다. 요청하신 CPU 유휴 사용률 분석 결과...'
2025-05-29 13:14:58 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.report.service.ReportService.generateReport() => 11263ms
2025-05-29 13:14:58 [http-nio-10273-exec-4] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.report.controller.ReportController.generateReport() => 11264ms
2025-05-29 13:15:01 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:15:01 [pool-16-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:15:02 [pool-16-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 511ms
2025-05-29 13:15:04 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:15:04 [pool-17-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:15:05 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:15:05 [pool-18-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:15:05 [pool-17-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 603ms
2025-05-29 13:15:05 [pool-18-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 299ms
2025-05-29 13:15:08 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:15:08 [pool-19-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:15:08 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:15:08 [pool-20-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:15:08 [pool-19-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 504ms
2025-05-29 13:15:09 [pool-20-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 726ms
2025-05-29 13:15:09 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData()
2025-05-29 13:15:09 [pool-21-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -180m) |> filter(fn: (r) => r["companyDomain"] == "null") |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["location"] == "power_meter") |> filter(fn: (r) => r["deviceId"] == "192.168.71.74") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["gatewayId"] == "modbus") |> filter(fn: (r) => r["_measurement"] == "current_amps") |> filter(fn: (r) => r["companyDomain"] == "javame") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "origin", "building", "location", "deviceId", "place", "gatewayId", "measurement", "_measurement", "companyDomain"]) |> sort(columns: ["_time"])
2025-05-29 13:15:10 [pool-21-thread-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTimeSeriesData() => 797ms
2025-05-29 13:16:04 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [b9dbbe7a] created for request: /environment/javame/origins
2025-05-29 13:16:04 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.TimeSeriesDataController.getOrigins()
2025-05-29 13:16:04 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.TimeSeriesDataController, 메서드 = getOrigins, 파라미터 = [javame]
2025-05-29 13:16:04 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getOriginList()
2025-05-29 13:16:05 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getOriginList() => 467ms
2025-05-29 13:16:05 [http-nio-10273-exec-1] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.TimeSeriesDataController.getOrigins() => 467ms
2025-05-29 13:16:11 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.TraceIdFilter - TraceId [58ceecf6] created for request: /environment/javame/tree
2025-05-29 13:16:11 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.controller.BuildTreeController.getTree()
2025-05-29 13:16:11 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.config.annotation.NormalizeCompanyDomainAspect - 정제된 companyDomain = javame, 호출 클래스 = com.nhnacademy.environment.controller.BuildTreeController, 메서드 = getTree, 파라미터 = [javame]
2025-05-29 13:16:11 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.tree.service.BuildTreeService.buildTree()
2025-05-29 13:16:11 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:12 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 842ms
2025-05-29 13:16:12 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:13 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1025ms
2025-05-29 13:16:13 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:14 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 838ms
2025-05-29 13:16:14 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:15 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1312ms
2025-05-29 13:16:15 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:17 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1290ms
2025-05-29 13:16:17 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:17 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 331ms
2025-05-29 13:16:17 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:17 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 449ms
2025-05-29 13:16:17 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:18 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 790ms
2025-05-29 13:16:18 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1437ms
2025-05-29 13:16:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 453ms
2025-05-29 13:16:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 317ms
2025-05-29 13:16:20 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:22 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1191ms
2025-05-29 13:16:22 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:22 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 441ms
2025-05-29 13:16:22 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1259ms
2025-05-29 13:16:23 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:24 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 769ms
2025-05-29 13:16:24 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:24 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 374ms
2025-05-29 13:16:24 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:26 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1331ms
2025-05-29 13:16:26 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:26 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 399ms
2025-05-29 13:16:26 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:27 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1240ms
2025-05-29 13:16:27 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:29 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1413ms
2025-05-29 13:16:29 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:30 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1649ms
2025-05-29 13:16:30 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:32 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 2056ms
2025-05-29 13:16:32 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:34 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1517ms
2025-05-29 13:16:34 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:37 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 2575ms
2025-05-29 13:16:37 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:39 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 2880ms
2025-05-29 13:16:39 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:43 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 3517ms
2025-05-29 13:16:43 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:44 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 988ms
2025-05-29 13:16:44 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 1177ms
2025-05-29 13:16:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues()
2025-05-29 13:16:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.timeseries.service.TimeSeriesDataService.getTagValues() => 281ms
2025-05-29 13:16:45 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.tree.service.BuildTreeService - 최종 트리: TreeNode(label=루트, tag=root, value=root, children=[TreeNode(label=경남 캠퍼스, tag=building, value=gyeongnam_campus, children=[TreeNode(label=서버 데이터, tag=origin, value=server_data, children=[TreeNode(label=전력 계측기, tag=location, value=power_meter, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=modbus, tag=gatewayId, value=modbus, children=[TreeNode(label=전류(A), tag=measurement, value=current_amps, children=[]), TreeNode(label=역률(%), tag=measurement, value=power_factor_avg_percent, children=[]), TreeNode(label=전력 사용량(W), tag=measurement, value=power_watts, children=[]), TreeNode(label=온도(℃), tag=measurement, value=temperature_celsius, children=[])])])])]), TreeNode(label=서버 리소스, tag=location, value=server_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=CPU, tag=gatewayId, value=cpu, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=usage_idle, children=[]), TreeNode(label=I/O 대기시간(%), tag=measurement, value=usage_iowait, children=[]), TreeNode(label=시스템 사용률(%), tag=measurement, value=usage_system, children=[]), TreeNode(label=사용자 사용률(%), tag=measurement, value=usage_user, children=[])]), TreeNode(label=디스크, tag=gatewayId, value=disk, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=디스크 I/O, tag=gatewayId, value=diskio, children=[TreeNode(label=I/O 작업 시간(ms), tag=measurement, value=io_time, children=[]), TreeNode(label=읽기량(Byte), tag=measurement, value=read_bytes, children=[]), TreeNode(label=쓰기량(Byte), tag=measurement, value=write_bytes, children=[])]), TreeNode(label=메모리, tag=gatewayId, value=mem, children=[TreeNode(label=메모리 가용률(%), tag=measurement, value=available_percent, children=[]), TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=네트워크, tag=gatewayId, value=net, children=[TreeNode(label=수신량(Byte), tag=measurement, value=bytes_recv, children=[]), TreeNode(label=전송량(Byte), tag=measurement, value=bytes_sent, children=[])]), TreeNode(label=센서, tag=gatewayId, value=sensors, children=[TreeNode(label=센서 온도(℃), tag=measurement, value=temp_input, children=[])]), TreeNode(label=스왑, tag=gatewayId, value=swap, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=시스템, tag=gatewayId, value=system, children=[TreeNode(label=1분 평균 부하, tag=measurement, value=load1, children=[])])])])]), TreeNode(label=서비스 리소스, tag=location, value=service_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=인증 서비스, tag=gatewayId, value=javame-auth, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=환경 API, tag=gatewayId, value=javame-environment-api, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=프론트엔드, tag=gatewayId, value=javame-frontend, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=디스크 읽기량(Byte), tag=measurement, value=disk_io_bytes_direction_read, children=[]), TreeNode(label=디스크 쓰기량(Byte), tag=measurement, value=disk_io_bytes_direction_write, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=게이트웨이, tag=gatewayId, value=javame-gateway, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=회원 서비스, tag=gatewayId, value=javame-member, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])])])])]), TreeNode(label=출입구, tag=location, value=입구, children=[TreeNode(label=24e124743d011875, tag=deviceId, value=24e124743d011875, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[])])])])])])
2025-05-29 13:16:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.tree.service.BuildTreeService.buildTree() => 34154ms
2025-05-29 13:16:45 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.controller.BuildTreeController - 반환되는 트리구조: TreeNode(label=루트, tag=root, value=root, children=[TreeNode(label=경남 캠퍼스, tag=building, value=gyeongnam_campus, children=[TreeNode(label=서버 데이터, tag=origin, value=server_data, children=[TreeNode(label=전력 계측기, tag=location, value=power_meter, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=modbus, tag=gatewayId, value=modbus, children=[TreeNode(label=전류(A), tag=measurement, value=current_amps, children=[]), TreeNode(label=역률(%), tag=measurement, value=power_factor_avg_percent, children=[]), TreeNode(label=전력 사용량(W), tag=measurement, value=power_watts, children=[]), TreeNode(label=온도(℃), tag=measurement, value=temperature_celsius, children=[])])])])]), TreeNode(label=서버 리소스, tag=location, value=server_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=CPU, tag=gatewayId, value=cpu, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=usage_idle, children=[]), TreeNode(label=I/O 대기시간(%), tag=measurement, value=usage_iowait, children=[]), TreeNode(label=시스템 사용률(%), tag=measurement, value=usage_system, children=[]), TreeNode(label=사용자 사용률(%), tag=measurement, value=usage_user, children=[])]), TreeNode(label=디스크, tag=gatewayId, value=disk, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=디스크 I/O, tag=gatewayId, value=diskio, children=[TreeNode(label=I/O 작업 시간(ms), tag=measurement, value=io_time, children=[]), TreeNode(label=읽기량(Byte), tag=measurement, value=read_bytes, children=[]), TreeNode(label=쓰기량(Byte), tag=measurement, value=write_bytes, children=[])]), TreeNode(label=메모리, tag=gatewayId, value=mem, children=[TreeNode(label=메모리 가용률(%), tag=measurement, value=available_percent, children=[]), TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=네트워크, tag=gatewayId, value=net, children=[TreeNode(label=수신량(Byte), tag=measurement, value=bytes_recv, children=[]), TreeNode(label=전송량(Byte), tag=measurement, value=bytes_sent, children=[])]), TreeNode(label=센서, tag=gatewayId, value=sensors, children=[TreeNode(label=센서 온도(℃), tag=measurement, value=temp_input, children=[])]), TreeNode(label=스왑, tag=gatewayId, value=swap, children=[TreeNode(label=메모리 사용률(%), tag=measurement, value=used_percent, children=[])]), TreeNode(label=시스템, tag=gatewayId, value=system, children=[TreeNode(label=1분 평균 부하, tag=measurement, value=load1, children=[])])])])]), TreeNode(label=서비스 리소스, tag=location, value=service_resource_data, children=[TreeNode(label=192.168.71.74, tag=deviceId, value=192.168.71.74, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[TreeNode(label=인증 서비스, tag=gatewayId, value=javame-auth, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=환경 API, tag=gatewayId, value=javame-environment-api, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=프론트엔드, tag=gatewayId, value=javame-frontend, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=디스크 읽기량(Byte), tag=measurement, value=disk_io_bytes_direction_read, children=[]), TreeNode(label=디스크 쓰기량(Byte), tag=measurement, value=disk_io_bytes_direction_write, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=게이트웨이, tag=gatewayId, value=javame-gateway, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])]), TreeNode(label=회원 서비스, tag=gatewayId, value=javame-member, children=[TreeNode(label=CPU 사용률(%), tag=measurement, value=cpu_utilization_percent, children=[]), TreeNode(label=Garbage Collector 실행 횟수, tag=measurement, value=gc_g1_young_generation_count, children=[]), TreeNode(label=Garbage Collector 대상 메모리 사용량(Byte), tag=measurement, value=memory_old_gen_used_bytes, children=[]), TreeNode(label=Heap 사용량(Byte), tag=measurement, value=memory_total_heap_used_bytes, children=[]), TreeNode(label=열린 파일 수, tag=measurement, value=process_open_file_descriptors_count, children=[]), TreeNode(label=활성 스레드 수, tag=measurement, value=thread_active_count, children=[])])])])]), TreeNode(label=출입구, tag=location, value=입구, children=[TreeNode(label=24e124743d011875, tag=deviceId, value=24e124743d011875, children=[TreeNode(label=서버실, tag=place, value=server_room, children=[])])])])])])
2025-05-29 13:16:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [ENTER] com.nhnacademy.environment.tree.service.BuildTreeService.convertToDto()
2025-05-29 13:16:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.tree.service.BuildTreeService.convertToDto() => 0ms
2025-05-29 13:16:45 [http-nio-10273-exec-5] INFO  com.nhnacademy.environment.config.TraceAspect - [EXIT] com.nhnacademy.environment.controller.BuildTreeController.getTree() => 34155ms
2025-05-29 13:18:03 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-29 13:23:03 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-29 13:28:03 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-29 13:28:22 [SpringApplicationShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application ENVIRONMENT-API with eureka with status DOWN
2025-05-29 13:28:22 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1748492902319, current=DOWN, previous=UP]
2025-05-29 13:28:22 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/localhost:ENVIRONMENT-API:10273: registering service...
2025-05-29 13:28:22 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-05-29 13:28:22 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-05-29 13:28:22 [SpringApplicationShutdownHook] INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-29 13:28:22 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-29 13:28:22 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/localhost:ENVIRONMENT-API:10273 - registration status: 204
2025-05-29 13:28:22 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-29 13:28:22 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
