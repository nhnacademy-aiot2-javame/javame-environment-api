2025-05-08 10:00:02 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:00:32 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:01:03 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:01:33 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:02:03 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:02:33 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:03:04 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:03:34 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:04:04 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-08 10:04:04 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:04:35 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:05:05 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:05:35 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:06:05 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:06:36 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:06:54 [main] ERROR com.nhnacademy.environment.util.InfluxUtil - extractDistinctValues 실패: 쿼리 실패
2025-05-08 10:07:06 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:07:15 [main] ERROR com.nhnacademy.environment.util.InfluxUtil - extractDistinctValues 실패: 쿼리 실패
2025-05-08 10:07:15 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:07:15 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - 1시간 평균 Flux: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "cpu") |> filter(fn: (r) => r["_field"] == "value") |> aggregateWindow(every: 1h, fn: mean, createEmpty: false)
2025-05-08 10:07:15 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:07:15 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - 하루 고정 Flux: from(bucket: "data") |> range(start: time(v: "2025-05-08T00:07:15.979977438Z"), stop: time(v: "2025-05-08T01:07:15.980006847Z")) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "cpu") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:07:16 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 하루 평균 저장 배치 시작
2025-05-08 10:07:16 [main] WARN  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 평균 없음 - domain=nhnacademy, origin=sensor_data, measurement=temperature, filters={origin=sensor_data, companyDomain=nhnacademy}
2025-05-08 10:07:16 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 전체 도메인 평균 저장 배치 완료
2025-05-08 10:07:16 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 하루 평균 저장 배치 시작
2025-05-08 10:07:16 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 쿼리 범위: 2025-05-07T00:00 ~ 2025-05-08T00:00
2025-05-08 10:07:16 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 저장 완료: com.nhnacademy.environment.timeseries.domain.AverageData@2cd877d3
2025-05-08 10:07:16 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 전체 도메인 평균 저장 배치 완료
2025-05-08 10:07:16 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "test-bucket") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["device_id"] == "abc123") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "device_id"]) |> sort(columns: ["_time"])
2025-05-08 10:07:36 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:08:07 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:08:08 [main] ERROR com.nhnacademy.environment.util.InfluxUtil - extractDistinctValues 실패: 쿼리 실패
2025-05-08 10:08:08 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:08:08 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - 1시간 평균 Flux: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "cpu") |> filter(fn: (r) => r["_field"] == "value") |> aggregateWindow(every: 1h, fn: mean, createEmpty: false)
2025-05-08 10:08:08 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:08:08 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - 하루 고정 Flux: from(bucket: "data") |> range(start: time(v: "2025-05-08T00:08:08.270700946Z"), stop: time(v: "2025-05-08T01:08:08.270726235Z")) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "cpu") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:08:08 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 하루 평균 저장 배치 시작
2025-05-08 10:08:08 [main] WARN  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 평균 없음 - domain=nhnacademy, origin=sensor_data, measurement=temperature, filters={origin=sensor_data, companyDomain=nhnacademy}
2025-05-08 10:08:08 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 전체 도메인 평균 저장 배치 완료
2025-05-08 10:08:08 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 하루 평균 저장 배치 시작
2025-05-08 10:08:08 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 쿼리 범위: 2025-05-07T00:00 ~ 2025-05-08T00:00
2025-05-08 10:08:08 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 저장 완료: com.nhnacademy.environment.timeseries.domain.AverageData@2cd877d3
2025-05-08 10:08:08 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 전체 도메인 평균 저장 배치 완료
2025-05-08 10:08:08 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "test-bucket") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["device_id"] == "abc123") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "device_id"]) |> sort(columns: ["_time"])
2025-05-08 10:08:08 [main] INFO  org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.nhnacademy.environment.JavameEnvironmentApiApplication for test class com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest
2025-05-08 10:08:09 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-05-08 10:08:09 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest - Starting TimeSeriesDataControllerTest using Java 21.0.7 with PID 44931 (started by nhnacademy in /home/nhnacademy/IdeaProjects/javame/javame-environment-api)
2025-05-08 10:08:09 [main] DEBUG com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest - Running with Spring Boot v3.4.4, Spring v6.2.5
2025-05-08 10:08:09 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-05-08 10:08:10 [main] INFO  org.springframework.boot.test.mock.web.SpringBootMockServletContext - Initializing Spring TestDispatcherServlet ''
2025-05-08 10:08:10 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Initializing Servlet ''
2025-05-08 10:08:10 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-08 10:08:10 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest - Started TimeSeriesDataControllerTest in 1.587 seconds (process running for 5.416)
2025-05-08 10:08:10 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesDataController - /time-series 요청 도착 - origin: sensor_data, range: 180, filters: {}
2025-05-08 10:08:10 [main] INFO  org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.nhnacademy.environment.JavameEnvironmentApiApplication for test class com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest
2025-05-08 10:08:10 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest - Starting TimeSeriesSseControllerTest using Java 21.0.7 with PID 44931 (started by nhnacademy in /home/nhnacademy/IdeaProjects/javame/javame-environment-api)
2025-05-08 10:08:10 [main] DEBUG com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest - Running with Spring Boot v3.4.4, Spring v6.2.5
2025-05-08 10:08:10 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-05-08 10:08:10 [main] INFO  org.springframework.boot.test.mock.web.SpringBootMockServletContext - Initializing Spring TestDispatcherServlet ''
2025-05-08 10:08:10 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Initializing Servlet ''
2025-05-08 10:08:10 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-08 10:08:10 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest - Started TimeSeriesSseControllerTest in 0.236 seconds (process running for 5.856)
2025-05-08 10:08:10 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=sensor_data, filters={location=lab}
2025-05-08 10:08:11 [main] INFO  org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.nhnacademy.environment.JavameEnvironmentApiApplication for test class com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest
2025-05-08 10:08:11 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest - Starting TimeSeriesAverageControllerTest using Java 21.0.7 with PID 44931 (started by nhnacademy in /home/nhnacademy/IdeaProjects/javame/javame-environment-api)
2025-05-08 10:08:11 [main] DEBUG com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest - Running with Spring Boot v3.4.4, Spring v6.2.5
2025-05-08 10:08:11 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-05-08 10:08:11 [main] INFO  org.springframework.boot.test.mock.web.SpringBootMockServletContext - Initializing Spring TestDispatcherServlet ''
2025-05-08 10:08:11 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Initializing Servlet ''
2025-05-08 10:08:11 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-08 10:08:11 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest - Started TimeSeriesAverageControllerTest in 0.173 seconds (process running for 6.061)
2025-05-08 10:08:37 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:09:04 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-08 10:09:07 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:09:20 [main] ERROR com.nhnacademy.environment.util.InfluxUtil - extractDistinctValues 실패: 쿼리 실패
2025-05-08 10:09:20 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:09:20 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - 1시간 평균 Flux: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "cpu") |> filter(fn: (r) => r["_field"] == "value") |> aggregateWindow(every: 1h, fn: mean, createEmpty: false)
2025-05-08 10:09:20 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:09:20 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageService - 하루 고정 Flux: from(bucket: "data") |> range(start: time(v: "2025-05-08T00:09:20.733855240Z"), stop: time(v: "2025-05-08T01:09:20.733879956Z")) |> filter(fn: (r) => r["origin"] == "origin") |> filter(fn: (r) => r["_measurement"] == "cpu") |> filter(fn: (r) => r["_field"] == "value") |> mean()
2025-05-08 10:09:20 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 하루 평균 저장 배치 시작
2025-05-08 10:09:20 [main] WARN  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 평균 없음 - domain=nhnacademy, origin=sensor_data, measurement=temperature, filters={origin=sensor_data, companyDomain=nhnacademy}
2025-05-08 10:09:20 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 전체 도메인 평균 저장 배치 완료
2025-05-08 10:09:20 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 하루 평균 저장 배치 시작
2025-05-08 10:09:20 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - 쿼리 범위: 2025-05-07T00:00 ~ 2025-05-08T00:00
2025-05-08 10:09:20 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 저장 완료: com.nhnacademy.environment.timeseries.domain.AverageData@2cd877d3
2025-05-08 10:09:20 [main] INFO  com.nhnacademy.environment.timeseries.service.TimeSeriesAverageBatchService - [운영] 전체 도메인 평균 저장 배치 완료
2025-05-08 10:09:20 [main] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "test-bucket") |> range(start: -60m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["device_id"] == "abc123") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "device_id"]) |> sort(columns: ["_time"])
2025-05-08 10:09:21 [main] INFO  org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.nhnacademy.environment.JavameEnvironmentApiApplication for test class com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest
2025-05-08 10:09:21 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-05-08 10:09:21 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest - Starting TimeSeriesDataControllerTest using Java 21.0.7 with PID 45470 (started by nhnacademy in /home/nhnacademy/IdeaProjects/javame/javame-environment-api)
2025-05-08 10:09:21 [main] DEBUG com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest - Running with Spring Boot v3.4.4, Spring v6.2.5
2025-05-08 10:09:21 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-05-08 10:09:22 [main] INFO  org.springframework.boot.test.mock.web.SpringBootMockServletContext - Initializing Spring TestDispatcherServlet ''
2025-05-08 10:09:22 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Initializing Servlet ''
2025-05-08 10:09:22 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-08 10:09:22 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesDataControllerTest - Started TimeSeriesDataControllerTest in 1.433 seconds (process running for 4.683)
2025-05-08 10:09:22 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesDataController - /time-series 요청 도착 - origin: sensor_data, range: 180, filters: {}
2025-05-08 10:09:23 [main] INFO  org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.nhnacademy.environment.JavameEnvironmentApiApplication for test class com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest
2025-05-08 10:09:23 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest - Starting TimeSeriesSseControllerTest using Java 21.0.7 with PID 45470 (started by nhnacademy in /home/nhnacademy/IdeaProjects/javame/javame-environment-api)
2025-05-08 10:09:23 [main] DEBUG com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest - Running with Spring Boot v3.4.4, Spring v6.2.5
2025-05-08 10:09:23 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-05-08 10:09:23 [main] INFO  org.springframework.boot.test.mock.web.SpringBootMockServletContext - Initializing Spring TestDispatcherServlet ''
2025-05-08 10:09:23 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Initializing Servlet ''
2025-05-08 10:09:23 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-08 10:09:23 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesSseControllerTest - Started TimeSeriesSseControllerTest in 0.231 seconds (process running for 5.087)
2025-05-08 10:09:23 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesSseController - SSE 연결 요청 도착: origin=sensor_data, filters={location=lab}
2025-05-08 10:09:23 [main] INFO  org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.nhnacademy.environment.JavameEnvironmentApiApplication for test class com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest
2025-05-08 10:09:23 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest - Starting TimeSeriesAverageControllerTest using Java 21.0.7 with PID 45470 (started by nhnacademy in /home/nhnacademy/IdeaProjects/javame/javame-environment-api)
2025-05-08 10:09:23 [main] DEBUG com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest - Running with Spring Boot v3.4.4, Spring v6.2.5
2025-05-08 10:09:23 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-05-08 10:09:23 [main] INFO  org.springframework.boot.test.mock.web.SpringBootMockServletContext - Initializing Spring TestDispatcherServlet ''
2025-05-08 10:09:23 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Initializing Servlet ''
2025-05-08 10:09:23 [main] INFO  org.springframework.test.web.servlet.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-08 10:09:23 [main] INFO  com.nhnacademy.environment.timeseries.controller.TimeSeriesAverageControllerTest - Started TimeSeriesAverageControllerTest in 0.179 seconds (process running for 5.295)
2025-05-08 10:09:37 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:10:08 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:10:38 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:11:09 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:11:39 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:12:09 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:12:40 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:13:10 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:13:40 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:14:04 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-05-08 10:14:10 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:14:41 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

2025-05-08 10:15:11 [pool-7-thread-1] DEBUG com.nhnacademy.environment.timeseries.service.TimeSeriesDataService - [TimeSeries] Flux query = from(bucket: "data") |> range(start: -30m) |> filter(fn: (r) => r["origin"] == "server_data") |> filter(fn: (r) => r["location"] == "입구") |> filter(fn: (r) => r["place"] == "server_room") |> filter(fn: (r) => r["device_id"] == "24e124743d011875") |> filter(fn: (r) => r["building"] == "gyeongnam_campus") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["_measurement"] == "SPL") |> keep(columns: ["_time", "_field", "_value", "_measurement", "location", "location", "place", "device_id", "building", "_field", "_measurement"]) |> sort(columns: ["_time"])

