2025-04-28 17:01:33 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:01:34 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:34 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:01:39 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "battery") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:01:41 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "bytes_recv") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:44 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "drop_in") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:47 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "drop_out") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:56 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "err_in") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:20 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:02:20 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:20 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:02:22 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:33 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:02:33 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:34 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:02:35 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_iowait") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:38 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:03:02 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temp_input") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:03:06 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "drop_out") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:03:09 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temp_input") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:06:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:07:31 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:07:32 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:07:32 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:07:38 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "humidity") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:28 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:36 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "load1") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:42 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_iowait") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:47 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "lora") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:49 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "humidity") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:00 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_user") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:03 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_iowait") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:06 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:12 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "humidity") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:21 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:09:21 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:22 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:09:26 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:10:13 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:10:14 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:10:14 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:10:23 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "humidity") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:12 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:11:13 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:13 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:11:29 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "battery") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:30 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "load1") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:33 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "battery") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:39 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:16:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:21:41 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "bytes_sent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:21:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:21:42 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:22:28 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:25:30 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:25:31 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:25:31 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:25:33 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:26:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:30:17 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:30:18 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:30:18 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:30:22 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:31:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:32:30 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:32:31 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:32:31 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:32:36 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:32:48 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:32:48 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:32:48 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:32:50 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:32:50 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:32:50 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:32:53 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:35:03 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temp_input") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:35:05 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:36:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:36:50 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:37:01 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:37:44 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:37:44 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:37:45 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:37:45 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:40:07 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:40:07 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:40:20 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:40:20 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:40:37 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:40:37 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:40:37 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:40:38 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:41:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:46:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:47:40 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:47:41 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:47:41 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:51:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:51:50 [SpringApplicationShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application ENVIRONMENT-API with eureka with status DOWN
2025-04-28 17:51:50 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1745830310072, current=DOWN, previous=UP]
2025-04-28 17:51:50 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273: registering service...
2025-04-28 17:51:50 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-04-28 17:51:50 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-04-28 17:51:50 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - registration status: 204
2025-04-28 17:51:50 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2025-04-28 17:51:53 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2025-04-28 17:51:53 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - deregister  status: 200
2025-04-28 17:51:53 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2025-04-28 17:57:00 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-04-28 17:57:00 [main] INFO  com.nhnacademy.environment.JavameEnvironmentApiApplication - Starting JavameEnvironmentApiApplication using Java 21.0.5 with PID 82813 (/home/nhnacademy/Desktop/JavaMe/javame-environment-api/target/classes started by nhnacademy in /home/nhnacademy/Desktop/JavaMe/javame-environment-api)
2025-04-28 17:57:00 [main] DEBUG com.nhnacademy.environment.JavameEnvironmentApiApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
2025-04-28 17:57:00 [main] INFO  com.nhnacademy.environment.JavameEnvironmentApiApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-28 17:57:01 [main] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=8fade950-24c9-3bd5-ae96-80dca446abf2
2025-04-28 17:57:01 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 10273 (http)
2025-04-28 17:57:01 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-10273"]
2025-04-28 17:57:01 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-04-28 17:57:01 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-04-28 17:57:01 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-28 17:57:01 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 529 ms
2025-04-28 17:57:01 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - [InfluxDB 연결 정보]
2025-04-28 17:57:01 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - ▶ URL    : https://influxdb.javame.live
2025-04-28 17:57:01 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - ▶ Token  : g-W7W0j9AE4coriQfnhHGMDnDhTZGok8bgY1NnZ6Z0EnTOsFY3SWAqDTC5fYlQ9mYnbK_doR074-a4Dgck2AOQ==
2025-04-28 17:57:01 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - ▶ Org    : javame
2025-04-28 17:57:01 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - ▶ Bucket : data
2025-04-28 17:57:01 [main] INFO  org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses RestTemplate.
2025-04-28 17:57:01 [main] WARN  org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2025-04-28 17:57:01 [main] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2025-04-28 17:57:01 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2025-04-28 17:57:02 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2025-04-28 17:57:02 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2025-04-28 17:57:02 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2025-04-28 17:57:02 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1745830622062 with initial instances count: 1
2025-04-28 17:57:02 [main] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application ENVIRONMENT-API with eureka with status UP
2025-04-28 17:57:02 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1745830622065, current=UP, previous=STARTING]
2025-04-28 17:57:02 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-10273"]
2025-04-28 17:57:02 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273: registering service...
2025-04-28 17:57:02 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 10273 (http) with context path '/'
2025-04-28 17:57:02 [main] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 10273
2025-04-28 17:57:02 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - registration status: 204
2025-04-28 17:57:02 [main] INFO  com.nhnacademy.environment.JavameEnvironmentApiApplication - Started JavameEnvironmentApiApplication in 1.637 seconds (process running for 2.331)
2025-04-28 17:58:29 [SpringApplicationShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application ENVIRONMENT-API with eureka with status DOWN
2025-04-28 17:58:29 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1745830709632, current=DOWN, previous=UP]
2025-04-28 17:58:29 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273: registering service...
2025-04-28 17:58:29 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-04-28 17:58:29 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-04-28 17:58:29 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - registration status: 204
2025-04-28 17:58:29 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2025-04-28 17:58:32 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2025-04-28 17:58:32 [DiscoveryClient-%d] WARN  com.netflix.discovery.TimedSupervisorTask - task supervisor shutting down, can't accept the task
2025-04-28 17:58:32 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - deregister  status: 200
2025-04-28 17:58:32 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2025-04-28 17:58:34 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-04-28 17:58:34 [main] INFO  com.nhnacademy.environment.JavameEnvironmentApiApplication - Starting JavameEnvironmentApiApplication using Java 21.0.5 with PID 83608 (/home/nhnacademy/Desktop/JavaMe/javame-environment-api/target/classes started by nhnacademy in /home/nhnacademy/Desktop/JavaMe/javame-environment-api)
2025-04-28 17:58:34 [main] DEBUG com.nhnacademy.environment.JavameEnvironmentApiApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
2025-04-28 17:58:34 [main] INFO  com.nhnacademy.environment.JavameEnvironmentApiApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-28 17:58:34 [main] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=8fade950-24c9-3bd5-ae96-80dca446abf2
2025-04-28 17:58:34 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 10273 (http)
2025-04-28 17:58:34 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-10273"]
2025-04-28 17:58:34 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-04-28 17:58:34 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
2025-04-28 17:58:34 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-28 17:58:34 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 536 ms
2025-04-28 17:58:34 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - [InfluxDB 연결 정보]
2025-04-28 17:58:34 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - ▶ URL    : https://influxdb.javame.live
2025-04-28 17:58:34 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - ▶ Token  : g-W7W0j9AE4coriQfnhHGMDnDhTZGok8bgY1NnZ6Z0EnTOsFY3SWAqDTC5fYlQ9mYnbK_doR074-a4Dgck2AOQ==
2025-04-28 17:58:34 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - ▶ Org    : javame
2025-04-28 17:58:34 [main] INFO  com.nhnacademy.environment.config.InfluxDBConfig - ▶ Bucket : data
2025-04-28 17:58:35 [main] INFO  org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses RestTemplate.
2025-04-28 17:58:35 [main] WARN  org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2025-04-28 17:58:35 [main] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1745830715562 with initial instances count: 2
2025-04-28 17:58:35 [main] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application ENVIRONMENT-API with eureka with status UP
2025-04-28 17:58:35 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1745830715564, current=UP, previous=STARTING]
2025-04-28 17:58:35 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-10273"]
2025-04-28 17:58:35 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273: registering service...
2025-04-28 17:58:35 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 10273 (http) with context path '/'
2025-04-28 17:58:35 [main] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 10273
2025-04-28 17:58:35 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - registration status: 204
2025-04-28 17:58:35 [main] INFO  com.nhnacademy.environment.JavameEnvironmentApiApplication - Started JavameEnvironmentApiApplication in 1.498 seconds (process running for 2.112)
2025-04-28 17:59:05 [DiscoveryClient-HeartbeatExecutor-%d] WARN  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failure with status code 401; retrying on another server if available
2025-04-28 17:59:05 [DiscoveryClient-HeartbeatExecutor-%d] WARN  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failure with status code 401; retrying on another server if available
2025-04-28 17:59:05 [DiscoveryClient-HeartbeatExecutor-%d] ERROR com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - was unable to send heartbeat!
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:76) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:845) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1402) ~[eureka-client-2.0.4.jar:2.0.4]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572) ~[?:?]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317) ~[?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144) ~[?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642) ~[?:?]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
2025-04-28 17:59:21 [SpringApplicationShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application ENVIRONMENT-API with eureka with status DOWN
2025-04-28 17:59:21 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1745830761392, current=DOWN, previous=UP]
2025-04-28 17:59:21 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273: registering service...
2025-04-28 17:59:21 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-04-28 17:59:21 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-04-28 17:59:21 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2025-04-28 17:59:21 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient - Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:10280/eureka/}, exception=I/O error on POST request for "http://localhost:10280/eureka/apps/ENVIRONMENT-API": Connect to http://localhost:10280 [localhost/127.0.0.1] failed: 연결이 거부됨 stacktrace=org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://localhost:10280/eureka/apps/ENVIRONMENT-API": Connect to http://localhost:10280 [localhost/127.0.0.1] failed: 연결이 거부됨
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:926)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:906)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:841)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:702)
	at org.springframework.cloud.netflix.eureka.http.RestTemplateEurekaHttpClient.register(RestTemplateEurekaHttpClient.java:87)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:76)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:828)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:125)
	at com.netflix.discovery.InstanceInfoReplicator$2.run(InstanceInfoReplicator.java:105)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.apache.hc.client5.http.HttpHostConnectException: Connect to http://localhost:10280 [localhost/127.0.0.1] failed: 연결이 거부됨
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at org.apache.hc.client5.http.impl.io.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:216)
	at org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:490)
	at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.connectEndpoint(InternalExecRuntime.java:164)
	at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.connectEndpoint(InternalExecRuntime.java:174)
	at org.apache.hc.client5.http.impl.classic.ConnectExec.execute(ConnectExec.java:144)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ProtocolExec.execute(ProtocolExec.java:192)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ContentCompressionExec.execute(ContentCompressionExec.java:150)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.HttpRequestRetryExec.execute(HttpRequestRetryExec.java:113)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.InternalHttpClient.doExecute(InternalHttpClient.java:174)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:87)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:55)
	at org.apache.hc.client5.http.classic.HttpClient.executeOpen(HttpClient.java:183)
	at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:99)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:71)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:81)
	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:117)
	at org.springframework.cloud.netflix.eureka.http.RestTemplateTransportClientFactory.lambda$restTemplate$2(RestTemplateTransportClientFactory.java:145)
	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:88)
	at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:72)
	at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:81)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:900)
	... 22 more

2025-04-28 17:59:21 [DiscoveryClient-InstanceInfoReplicator-%d] WARN  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failed with message: I/O error on POST request for "http://localhost:10280/eureka/apps/ENVIRONMENT-API": Connect to http://localhost:10280 [localhost/127.0.0.1] failed: 연결이 거부됨
2025-04-28 17:59:21 [DiscoveryClient-InstanceInfoReplicator-%d] WARN  com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - registration failed Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:76) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:828) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:125) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.InstanceInfoReplicator$2.run(InstanceInfoReplicator.java:105) ~[eureka-client-2.0.4.jar:2.0.4]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572) ~[?:?]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317) ~[?:?]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) ~[?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144) ~[?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642) ~[?:?]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
2025-04-28 17:59:21 [DiscoveryClient-InstanceInfoReplicator-%d] WARN  com.netflix.discovery.InstanceInfoReplicator - There was a problem with the instance info replicator
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:76) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:828) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:125) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.InstanceInfoReplicator$2.run(InstanceInfoReplicator.java:105) ~[eureka-client-2.0.4.jar:2.0.4]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572) ~[?:?]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317) ~[?:?]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) ~[?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144) ~[?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642) ~[?:?]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
2025-04-28 17:59:21 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2025-04-28 17:59:21 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient - Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:10280/eureka/}, exception=I/O error on DELETE request for "http://localhost:10280/eureka/apps/ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273": Connect to http://localhost:10280 [localhost/127.0.0.1] failed: 연결이 거부됨 stacktrace=org.springframework.web.client.ResourceAccessException: I/O error on DELETE request for "http://localhost:10280/eureka/apps/ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273": Connect to http://localhost:10280 [localhost/127.0.0.1] failed: 연결이 거부됨
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:926)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:906)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:841)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:702)
	at org.springframework.cloud.netflix.eureka.http.RestTemplateEurekaHttpClient.cancel(RestTemplateEurekaHttpClient.java:100)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:76)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:919)
	at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:900)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195)
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389)
	at org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:745)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:702)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1401)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:661)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1394)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1219)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:179)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1126)
	at org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:147)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:116)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.apache.hc.client5.http.HttpHostConnectException: Connect to http://localhost:10280 [localhost/127.0.0.1] failed: 연결이 거부됨
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at org.apache.hc.client5.http.impl.io.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:216)
	at org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:490)
	at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.connectEndpoint(InternalExecRuntime.java:164)
	at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.connectEndpoint(InternalExecRuntime.java:174)
	at org.apache.hc.client5.http.impl.classic.ConnectExec.execute(ConnectExec.java:144)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ProtocolExec.execute(ProtocolExec.java:192)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ContentCompressionExec.execute(ContentCompressionExec.java:150)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.HttpRequestRetryExec.execute(HttpRequestRetryExec.java:113)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.InternalHttpClient.doExecute(InternalHttpClient.java:174)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:87)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:55)
	at org.apache.hc.client5.http.classic.HttpClient.executeOpen(HttpClient.java:183)
	at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:99)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:71)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:81)
	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:117)
	at org.springframework.cloud.netflix.eureka.http.RestTemplateTransportClientFactory.lambda$restTemplate$2(RestTemplateTransportClientFactory.java:145)
	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:88)
	at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:72)
	at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:81)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:900)
	... 38 more

2025-04-28 17:59:21 [SpringApplicationShutdownHook] WARN  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failed with message: I/O error on DELETE request for "http://localhost:10280/eureka/apps/ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273": Connect to http://localhost:10280 [localhost/127.0.0.1] failed: 연결이 거부됨
2025-04-28 17:59:21 [SpringApplicationShutdownHook] ERROR com.netflix.discovery.DiscoveryClient - DiscoveryClient_ENVIRONMENT-API/192.168.71.74:ENVIRONMENT-API:10273 - de-registration failedCannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:76) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:919) ~[eureka-client-2.0.4.jar:2.0.4]
	at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:900) ~[eureka-client-2.0.4.jar:2.0.4]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389) ~[spring-cloud-context-4.2.1.jar:4.2.1]
	at org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136) ~[spring-cloud-context-4.2.1.jar:4.2.1]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:745) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:702) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1401) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:661) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1394) ~[spring-beans-6.2.5.jar:6.2.5]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1219) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1180) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:179) ~[spring-boot-3.4.4.jar:3.4.4]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1126) ~[spring-context-6.2.5.jar:6.2.5]
	at org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:147) ~[spring-boot-3.4.4.jar:3.4.4]
	at java.base/java.lang.Iterable.forEach(Iterable.java:75) ~[?:?]
	at org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:116) ~[spring-boot-3.4.4.jar:3.4.4]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
2025-04-28 17:59:21 [SpringApplicationShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
