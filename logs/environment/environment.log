2025-04-28 17:01:33 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:01:34 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:34 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:01:39 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "battery") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:01:41 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "bytes_recv") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:44 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "drop_in") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:47 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "drop_out") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:01:56 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "err_in") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:20 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:02:20 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:20 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:02:22 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:33 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:02:33 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:34 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:02:35 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_iowait") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:02:38 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:03:02 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temp_input") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:03:06 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "drop_out") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:03:09 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temp_input") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:06:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:07:31 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:07:32 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:07:32 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:07:38 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "humidity") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:28 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:36 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "load1") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:42 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_iowait") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:47 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "lora") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:08:49 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "humidity") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:00 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_user") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:03 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_iowait") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:06 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "usage_idle") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:12 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "humidity") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:21 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:09:21 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:09:22 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:09:26 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:10:13 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:10:14 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:10:14 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:10:23 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "humidity") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:12 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:11:13 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:13 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:11:29 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "battery") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:30 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "load1") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:33 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "battery") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:39 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:11:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:16:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:21:41 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "bytes_sent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:21:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:21:42 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:22:28 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:25:30 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:25:31 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:25:31 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:25:33 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:26:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:30:17 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:30:18 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:30:18 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:30:22 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:31:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:32:30 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:32:31 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:32:31 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:32:36 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:32:48 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:32:48 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:32:48 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:32:50 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:32:50 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:32:50 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:32:53 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:35:03 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temp_input") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:35:05 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:36:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:36:50 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:37:01 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:37:44 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:37:44 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:37:45 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:37:45 [http-nio-10273-exec-3] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:40:07 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:40:07 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:40:20 [http-nio-10273-exec-7] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:40:20 [http-nio-10273-exec-8] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:40:37 [http-nio-10273-exec-9] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:40:37 [http-nio-10273-exec-10] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:40:37 [http-nio-10273-exec-1] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
2025-04-28 17:40:38 [http-nio-10273-exec-2] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:41:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:46:41 [AsyncResolver-bootstrap-executor-%d] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2025-04-28 17:47:40 [http-nio-10273-exec-4] DEBUG com.nhnacademy.environment.service.SensorDataService - measurement 쿼리: from(bucket: "data") |> range(start: -12h) |> keep(columns: ["_measurement"]) |> distinct(column: "_measurement")
2025-04-28 17:47:41 [http-nio-10273-exec-5] DEBUG com.nhnacademy.environment.service.SensorDataService - ChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -60m) |> filter(fn: (r) => r["_measurement"] == "available_percent") |> filter(fn: (r) => r["_field"] == "value") |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> sort(columns: ["_time"])
2025-04-28 17:47:41 [http-nio-10273-exec-6] DEBUG com.nhnacademy.environment.service.SensorDataService - PieChartDataDto Flux 쿼리: from(bucket: "data") |> range(start: -12h) |> filter(fn: (r) => r["origin"] == "sensor_data") |> filter(fn: (r) => r["companyDomain"] == "nhnacademy") |> group(columns: ["_measurement"]) |> count() |> keep(columns: ["_measurement", "_value"])
